# scripts/init_postgres_db.py

import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
from config import Config
import logging

logger = logging.getLogger(__name__)

def create_base_table(cursor):
    """Create the base vehicle_detections table"""
    cursor.execute("""
        DROP TABLE IF EXISTS analysis.vehicle_detections CASCADE;
        
        CREATE TABLE analysis.vehicle_detections (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY,
            plate_text VARCHAR(20) NOT NULL,
            confidence FLOAT NOT NULL,
            timestamp_utc TIMESTAMPTZ NOT NULL,
            timestamp_local TIMESTAMPTZ NOT NULL,
            camera_id VARCHAR(50),
            location JSONB,
            vehicle_make VARCHAR(50),
            vehicle_model VARCHAR(50),
            vehicle_color VARCHAR(30),
            vehicle_year INTEGER,
            vehicle_type VARCHAR(30),
            vehicle_image_path TEXT,
            vehicle_confidence_scores JSONB,
            metadata JSONB
        );
    """)
    logger.info("Base table created successfully")

def convert_to_hypertable(cursor):
    """Convert the table to a hypertable"""
    cursor.execute("""
        SELECT create_hypertable('analysis.vehicle_detections', 'timestamp_utc', 
                               if_not_exists => TRUE,
                               create_default_indexes => FALSE);
    """)
    logger.info("Converted to hypertable successfully")

def create_indexes(cursor):
    """Create all necessary indexes"""
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_vehicle_detections_plate_time 
        ON analysis.vehicle_detections (plate_text, timestamp_utc);
        
        CREATE INDEX IF NOT EXISTS idx_vehicle_make_model 
        ON analysis.vehicle_detections (vehicle_make, vehicle_model);

        CREATE INDEX IF NOT EXISTS idx_vehicle_color 
        ON analysis.vehicle_detections (vehicle_color);

        CREATE INDEX IF NOT EXISTS idx_vehicle_type 
        ON analysis.vehicle_detections (vehicle_type);

        CREATE INDEX IF NOT EXISTS idx_vehicle_year 
        ON analysis.vehicle_detections (vehicle_year);
    """)
    logger.info("Indexes created successfully")

def create_statistics_view(cursor):
    """Create the statistics materialized view"""
    cursor.execute("""
        DROP MATERIALIZED VIEW IF EXISTS mv_vehicle_statistics CASCADE;
        
        CREATE MATERIALIZED VIEW mv_vehicle_statistics AS
        SELECT 
            vehicle_make,
            vehicle_model,
            vehicle_color,
            vehicle_type,
            COUNT(*) as detection_count,
            COUNT(DISTINCT plate_text) as unique_vehicles,
            MIN(timestamp_utc) as first_seen,
            MAX(timestamp_utc) as last_seen,
            jsonb_agg(DISTINCT vehicle_confidence_scores) as confidence_distribution
        FROM analysis.vehicle_detections
        WHERE vehicle_make IS NOT NULL
        GROUP BY vehicle_make, vehicle_model, vehicle_color, vehicle_type;

        CREATE UNIQUE INDEX idx_vehicle_statistics 
        ON mv_vehicle_statistics (vehicle_make, vehicle_model, vehicle_color, vehicle_type)
        WHERE vehicle_make IS NOT NULL;
    """)
    logger.info("Statistics view created successfully")

def create_functions(cursor):
    """Create database functions"""
    cursor.execute("""
        CREATE OR REPLACE FUNCTION refresh_vehicle_statistics()
        RETURNS void AS $$
        BEGIN
            REFRESH MATERIALIZED VIEW CONCURRENTLY mv_vehicle_statistics;
        END;
        $$ LANGUAGE plpgsql;
    """)
    logger.info("Database functions created successfully")

def init_postgres_db():
    """Initialize PostgreSQL database with vehicle detection capabilities"""
    try:
        # First connect to create database if needed
        conn = psycopg2.connect(
            dbname='postgres',
            user=Config.POSTGRES_USER,
            password=Config.POSTGRES_PASSWORD,
            host=Config.POSTGRES_HOST,
            port=Config.POSTGRES_PORT
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()

        # Create database if it doesn't exist
        cursor.execute(f"SELECT 1 FROM pg_database WHERE datname = '{Config.POSTGRES_DB}'")
        if not cursor.fetchone():
            cursor.execute(f'CREATE DATABASE {Config.POSTGRES_DB}')
            logger.info(f"Created database: {Config.POSTGRES_DB}")

        cursor.close()
        conn.close()

        # Connect to the actual database
        conn = psycopg2.connect(
            dbname=Config.POSTGRES_DB,
            user=Config.POSTGRES_USER,
            password=Config.POSTGRES_PASSWORD,
            host=Config.POSTGRES_HOST,
            port=Config.POSTGRES_PORT
        )
        conn.autocommit = True
        cursor = conn.cursor()

        # Create extensions
        cursor.execute('CREATE EXTENSION IF NOT EXISTS postgis;')
        cursor.execute('CREATE EXTENSION IF NOT EXISTS timescaledb;')
        cursor.execute('CREATE EXTENSION IF NOT EXISTS btree_gist;')

        # Create schema
        cursor.execute('CREATE SCHEMA IF NOT EXISTS analysis;')

        # Initialize schema step by step
        create_base_table(cursor)
        convert_to_hypertable(cursor)
        create_indexes(cursor)
        create_statistics_view(cursor)
        create_functions(cursor)

        logger.info("Successfully initialized PostgreSQL database")

    except Exception as e:
        logger.error(f"Error setting up database: {str(e)}")
        raise
    finally:
        if 'cursor' in locals() and cursor is not None:
            cursor.close()
        if 'conn' in locals() and conn is not None:
            conn.close()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    init_postgres_db()